// MenuMoney.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"
#include <iostream>
#include <cstring>
#include <string>
#include <fstream>
#include <windows.h>
#include "HeaderMoney.h"
using namespace std;
/*Должны быть реализованы метод инициализации Init(), метод ввода данных с клавиатуры Read(),
метод вывода данных на экран Display(), преобразование в строку toString(),
необходимо выполнить перегрузку основных операций для методов класса.
Для демонстрации работы с объектами нового типа во всех заданиях требуется
написать главную функцию.

Реализовать класс Money с двумя полями: first и second. Поле first – целое
положительное число, номинал купюры; номинал может принимать значения 1, 2, 5, 10,
50, 100, 500. Поле second - целое положительное число, количество купюр данного
достоинства. Требуется реализовать операции получения и изменения полей, сложение,
вычитание и операции сравнения.*/

int menu(int i)
{
	if (i < 1)
		cout << "1: Ввести данные с клавиатуры" << endl;
	if (i >= 1)
	{
		cout << "2: Вывести на экран" << endl;
		cout << "3: Превратить в строку" << endl;
		cout << "4: Получить номинал" << endl;
		cout << "5: Получить количество купюр" << endl;
		cout << "6: Изменить номинал и количество" << endl;
		cout << "7: Сложить" << endl;
		cout << "8: Вычесть" << endl;
		cout << "9: Сравнение" << endl;
	}
	cout << "0: Выход" << endl;
	cout << "--> ";
	if (i >= 1)
		do

		{
			cin >> i;
			if ((i == 1) || (i > 9) || (i < 0))
				cout << "такого варианта нет" << endl;
		} while (i == 1);
	else cin >> i;
	cout << endl;
	return i;
}
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	Money A, B;
	string s;
	A.Init();
	B.Init();
	bool ok;
	int i = 0, k = 0;
	do
	{
		i = menu(i);
		switch (i)
		{
		case 1:
		{
			A.Read();
			cout << endl;
		}
		break;
		case 0: break; case 2:
		{
			A.Display();
			cout << endl;
		}
		break;
		case 3:
		{
			s = A.toString();
			cout << s << endl;
			cout << endl;
		}
		break;
		case 4:
		{
			A.get_Nominal();
			cout << endl;
		}
		break;
		case 5:
		{
			A.get_Count();
			cout << endl;
		}
		break;
		case 6:
		{
			A.Change();
			cout << endl;
		}
		break;
		case 7:
		{
			cout << "исходный объект :" << endl;
			A.Display();
			cout << "новый объект :" << endl;
			B.Read();
			k = A + B;
			cout << k << "р." << endl;
			cout << endl;
		}
		break;
		case 8:
		{
			cout << "исходный объект :" << endl;
			A.Display();
			cout << "новый объект :" << endl;
			B.Read();
			k = A - B;
			cout << k << "р." << endl;
			cout << endl;
		}
		break;
		case 9:
		{
			cout << "исходный объект :" << endl;
			A.Display();
			cout << "новый объект :" << endl;
			B.Read();
			if (A == B)
				cout << "объекты равны" << endl;
			else if (A > B)
				cout << "исходный объект больше" << endl;
			else if (A < B)
				cout << "исходный объект меньше" << endl;
			cout << endl;
		}
		default:
			break;
		}
	} while (i != 0);

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
